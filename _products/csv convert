import csv
import os
import requests
from urllib.parse import urlparse
import random

def download_image(image_url, folder_path, image_name):
    response = requests.get(image_url)
    image_path = os.path.join(folder_path, image_name)
    
    with open(image_path, 'wb') as image_file:
        image_file.write(response.content)
    
    return image_path

def create_md_file(entry, image_path, ads_file):
    folder_name = sanitize_folder_name(entry.get('NAME', ''))

    # Determine status and color based on AVAILABILITY
    availability = entry.get('AVAILABILITY', '').lower()
    if 'in stock' in availability:
        availability_status = f'<span style="color: #00ff00;">{availability}</span>'
    else:
        availability_status = f'<span style="color: #ff0000;">{availability}</span>'

    condition = entry.get('CONDITION', '')
    size = entry.get('SIZE', '')

    md_content = f"---\n"
    md_content += f"name: {entry.get('NAME', '')}\n"
    md_content += f"BRAND: {entry.get('BRAND', '')}\n"
    md_content += f"ID: {entry.get('ID', '')}\n"
    md_content += f"description_markdown: >-\n  {entry.get('DESCRIPTION', '')}\n\n"

    # Add additional fields as needed
    md_content += f"garment_type:\n"
    md_content += f"PRODUCT_TYPE_markdown: >-\n  {entry.get('PRODUCT_TYPE', '')}\n"
    md_content += f"GOOGLE_PRODUCT_CATEGORY_NAME_markdown: >-\n  {entry.get('GOOGLE_PRODUCT_CATEGORY_NAME', '')}\n"
    md_content += f"ITEM_GROUP_ID_markdown: >-\n  {entry.get('ITEM_GROUP_ID', '')}\n"
    md_content += f"CUSTOM_LABEL_0_markdown: >-\n  {entry.get('CUSTOM_LABEL_0', '')}\n"
    md_content += f"PROMOTION_ID_markdown: >-\n  {entry.get('PROMOTION_ID', '')}\n"
    md_content += f"LAST_UPDATED_markdown: >-\n  {entry.get('LAST_UPDATED', '')}\n"
    md_content += f"AVAILABILITY_markdown: >-\n  AVAILABILITY: {availability_status}\n"
    md_content += f"COLOR:\n"
    md_content += f"CONDITION_markdown: >-\n  CONDITION: {condition}\n"
    md_content += f"SIZE_markdown: >-\n  SIZE: {size}\n"
    md_content += f"price: {entry.get('PRICE', '')}\n"  # Use 'PRICE' as the key
    md_content += f"stock: {entry.get('stock', '')}\n"

    # Button link markup
    md_content += f"LINK_markdown: >-\n  <a href=\"{entry.get('LINK', '')}\" target=\"_blank\" style=\"display: inline-block; padding: 10px 20px; font-size: 16px; text-align: center; text-decoration: none; cursor: pointer; border: 1px solid #3498db; color: #3498db; background-color: #fff; border-radius: 5px; transition: background-color 0.3s;\">Go to Product</a>\n"

    # Image path in styles section
    md_content += f"styles:\n"
    md_content += f"  - status: {availability}\n"  # Update this line based on your requirement
    md_content += f"    color: '{'#00ff00' if 'in stock' in availability else '#ff0000'}'\n"
    md_content += f"    image: /images/products/{folder_name}/{os.path.basename(image_path)}\n"

    # Ads
    ads_content = read_ads_content(ads_file)
    md_content += f"ads_markdown: >-\n  {ads_content}\n\n"

    md_content += "---\n"

    md_file_path = f"{sanitize_file_name(entry.get('NAME', ''))}.md"

    with open(md_file_path, 'w', encoding='utf-8') as md_file:
        md_file.write(md_content)

    return md_file_path

def read_ads_content(ads_file):
    # Read ads content from a file and return a randomly selected ad
    with open(ads_file, 'r', encoding='utf-8') as file:
        ads_content = file.readlines()

    # Select a random ad
    random_ad = random.choice(ads_content)

    return random_ad.strip()

def sanitize_folder_name(name):
    # Replace invalid characters with underscores
    invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
    for char in invalid_chars:
        name = name.replace(char, '_')
    return name

def sanitize_file_name(name):
    # Replace invalid characters with underscores
    invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*', 'Â®']
    for char in invalid_chars:
        name = name.replace(char, '_')
    return name

def main(csv_file, ads_file):
    with open(csv_file, 'r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        
        for entry in reader:
            name = sanitize_folder_name(entry.get('NAME', ''))
            image_link = entry.get('IMAGE_LINK', '')
            description = entry.get('DESCRIPTION', '')
            
            folder_path = os.path.join('.', name)
            os.makedirs(folder_path, exist_ok=True)
            
            image_path = download_image(image_link, folder_path, os.path.basename(urlparse(image_link).path))
            md_file_path = create_md_file(entry, image_path, ads_file)
            
            print(f"Generated {md_file_path} and downloaded image for {name}")

if __name__ == "__main__":
    csv_file = 'Untitled spreadsheet - Zinus-gmcfeed_txt-shopping.csv'  # Replace with your CSV file path
    ads_file = 'ad_code.txt'  # Replace with your ads text file path
    main(csv_file, ads_file)
